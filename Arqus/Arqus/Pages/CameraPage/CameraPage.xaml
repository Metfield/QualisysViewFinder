<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:local="clr-namespace:Arqus"
             xmlns:ui="clr-namespace:Arqus.UI"
             xmlns:urho="clr-namespace:Urho.Forms;assembly=Urho.Forms"
             xmlns:prism="clr-namespace:Prism.Mvvm;assembly=Prism.Forms"
             prism:ViewModelLocator.AutowireViewModel="True"
             xmlns:segcon="clr-namespace:SegmentedTabControl.FormsPlugin;assembly=SegmentedTabControl"
             x:Class="Arqus.CameraPage" 
             Title="{Binding PageTitle}">
    
    <ContentPage.ToolbarItems>
        <ui:BindableToolbarItem Command="{Binding SetCameraScreenLayoutCommand}" IsVisible="{Binding ShowGridIconOnToolbar}" Icon="ic_grid_white_24dp" />
    </ContentPage.ToolbarItems>

    <StackLayout Margin="0" Style="{StaticResource Background}">

        <Frame Style="{StaticResource AppBar}" Padding="0" IsVisible="{Binding IsModeToolbarActive}" InputTransparent="False" MinimumHeightRequest="20">

            <ContentView.Margin>
                <OnPlatform x:TypeArguments="Thickness"
                    iOS="0, 12, 0, 5"
                    Android="0, 2, 0, -5" />
            </ContentView.Margin>

            <Grid VerticalOptions="End" Padding="0">

                <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>

                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <Button Grid.Row="0"
                        Grid.Column="0"
                        Text="Marker"
                        TextColor="White"
                        Image="{Binding CurrentCamera.Profile.MarkerModeSupport, Converter={StaticResource StringToBoolConverter}, ConverterParameter=Marker}"
                        Command="{Binding SetCameraModeToMarkerCommand}"
                        BackgroundColor="{Binding CurrentCamera.Settings.Mode, Converter={StaticResource EqualityToBooleanConverter}, ConverterParameter=ModeMarker}"
                        Style="{StaticResource NoMarginButton}"
                        IsEnabled="{Binding CurrentCamera.Profile.MarkerModeSupport}"
                        />

                <Button Grid.Row="0"
                        Grid.Column="1"
                        Text="Intensity"
                        TextColor="White"
                        Image="{Binding IsDemoModeActive, Converter={StaticResource StringToBoolConverter}, ConverterParameter=Intensity}"
                        Command="{Binding SetCameraModeToIntensityCommand}"
                        BackgroundColor="{Binding CurrentCamera.Settings.Mode, Converter={StaticResource EqualityToBooleanConverter}, ConverterParameter=ModeMarkerIntensity}"
                        Style="{StaticResource NoMarginButton}"
                        IsEnabled="{Binding IsDemoModeActive, Converter={StaticResource InverseBoolConverter}}"
                        />

                <Button Grid.Row="0"
                        Grid.Column="2"
                        Text="Video"
                        TextColor="White"
                        Image="{Binding IsDemoModeActive, Converter={StaticResource StringToBoolConverter}, ConverterParameter=Video}"
                        Command="{Binding SetCameraModeToVideoCommand}"
                        BackgroundColor="{Binding CurrentCamera.Settings.Mode, Converter={StaticResource EqualityToBooleanConverter}, ConverterParameter=ModeVideo}"
                        Style="{StaticResource NoMarginButton}"
                        IsEnabled="{Binding IsDemoModeActive, Converter={StaticResource InverseBoolConverter}}"
                        />
            </Grid>
        </Frame>

        <StackLayout x:Name="mainContent" Orientation="Vertical" VerticalOptions="FillAndExpand" Padding="0">

            <!-- NOTE: We need an arbitrary HeighRequest to fix a bug in iOS 
                when changing orientation concerning the size of the surface -->
            <urho:UrhoSurface x:Name="urhoSurface" HeightRequest="42" VerticalOptions="FillAndExpand" HorizontalOptions="FillAndExpand" Margin="0, 10, 0, 10"/>

            <StackLayout HorizontalOptions="End" IsVisible="{Binding IsDrawerActive}" BackgroundColor="Transparent"
                     Margin="0, -35, 0, -10" WidthRequest="45"  Style="{StaticResource Card}">

                <ContentView.Padding>
                    <OnPlatform x:TypeArguments="Thickness"
                    iOS="0, 0, 10, 10"
                    Android="0, 0, 0, 0" />
                </ContentView.Padding>

                <Button x:Name="toggleButton" HorizontalOptions="End" BorderWidth="0" BorderColor="Transparent" 
                    Command="{Binding ToggleBottomSheetCommand}" Image="ic_settings_white_24dp" BackgroundColor="Transparent"
                    IsVisible="{Binding IsBottomSheetVisible, Converter={StaticResource InverseBoolConverter}}">
                    <Button.Effects>
                        <local:FlatButtonEffect />
                    </Button.Effects>
                </Button>

            </StackLayout>

            <StackLayout IsVisible="{Binding IsDrawerActive}">

                <!-- Drawers layout -->
                <StackLayout x:Name="bottomSheet" IsVisible="{Binding IsBottomSheetVisible}"  VerticalOptions="End" IsEnabled="True" Margin="0" Padding="0" BackgroundColor="Chocolate">

                <Frame Style="{StaticResource Card}" HorizontalOptions="Fill" IsVisible="{Binding IsGridLayoutActive, Converter={StaticResource InverseBoolConverter}}" CornerRadius="0" >

                    <StackLayout>

                        <!--TODO: Show hiding button either here or outside drawer?->
                    <Button HorizontalOptions="End" BorderWidth="0" BorderColor="Transparent" IsEnabled="True" IsVisible="True" Margin="40, -20, 0, -10" WidthRequest="50" 
                    BackgroundColor="#444444"  Command="{Binding ToggleBottomSheetCommand}" Image="drawable-hdpi/ic_arrow_drop_down_white_24dp"/>-->

                <!-- Marker-specific drawer -->
                <StackLayout VerticalOptions="StartAndExpand" IsVisible="{Binding IsMarkerMode}">
                    <StackLayout HorizontalOptions="FillAndExpand" Orientation="Horizontal">
                        <Label Style="{StaticResource DrawerText}" Text="Exposure &amp; Flashtime" HorizontalOptions="StartAndExpand"/>
                        <Label Style="{StaticResource DrawerText}" BindingContext="{x:Reference Name=markerExposureSlider}" Text="{Binding Path=Value, Converter={StaticResource PrefixConverter}, ConverterParameter='µs'}" 
                                   HorizontalOptions="End"/>
                    </StackLayout>

                    <Slider x:Name="markerExposureSlider" IsEnabled="{Binding IsDemoModeActive, Converter={StaticResource InverseBoolConverter}}"
                                HorizontalOptions="Fill" 
                                Maximum="{Binding CurrentCamera.Settings.MarkerExposure.Max}"
                                Minimum="{Binding CurrentCamera.Settings.MarkerExposure.Min}"
                                Value="{Binding CurrentCamera.Settings.MarkerExposure.Current}"
                                />

                    <StackLayout HorizontalOptions="FillAndExpand" Orientation="Horizontal">
                        <Label Style="{StaticResource DrawerText}" Text="Marker Threshold" HorizontalOptions="StartAndExpand" />
                        <Label Style="{StaticResource DrawerText}" BindingContext="{x:Reference Name=markerThresholdSlider}" Text="{Binding Path=Value, Converter={StaticResource MarkerThresholdToPercentageConverter}}" 
                                   HorizontalOptions="End"/>
                    </StackLayout>

                    <Slider x:Name="markerThresholdSlider" IsEnabled="{Binding IsDemoModeActive, Converter={StaticResource InverseBoolConverter}}"
                                HorizontalOptions="Fill"
                                Maximum="{Binding CurrentCamera.Settings.MarkerThreshold.Max}"
                                Minimum="{Binding CurrentCamera.Settings.MarkerThreshold.Min}"
                                Value="{Binding CurrentCamera.Settings.MarkerThreshold.Current}" />
                </StackLayout>

                <!-- Video-specific drawer -->
                <StackLayout VerticalOptions="StartAndExpand" IsVisible="{Binding IsVideoMode}">

                    <segcon:SegmentedTabControl x:Name="segmentedControls" UnselectedSegmentBackgroundColor="#444444" UnselectedSegmentTextColor="White" SelectedSegmentTextColor="White"
                                                    BackgroundColor="Chocolate" TintColor="{StaticResource highlightColor}" SelectedSegment="0" Padding="2"
                                                    IsVisible="{Binding CurrentCamera.LensControlEnabled}" VerticalOptions="StartAndExpand" MinimumHeightRequest="50">
                        <segcon:SegmentedTabControl.Children>
                            <Label Text="Video Settings" TextColor="White"/>
                            <Label Text="Lens Control" TextColor="White"/>
                        </segcon:SegmentedTabControl.Children>
                    </segcon:SegmentedTabControl>

                    <StackLayout IsVisible="{Binding IsLensControlActive, Converter={StaticResource InverseBoolConverter}}">

                        <!-- Auto exposure switch-->
                        <StackLayout IsVisible="{Binding CurrentCamera.Profile.AutoExposure}" HorizontalOptions="CenterAndExpand" Orientation="Horizontal" >
                            <Label Style="{StaticResource DrawerText}" Text="Auto exposure" />
                            <Switch x:Name="autoExposureSwitch" IsToggled="{Binding CurrentCamera.Settings.AutoExposure.Enabled}" />
                        </StackLayout>
                        
                        <!--Exposure compensation slider, visible only when auto exposure is enabled-->
                        <StackLayout IsVisible="{Binding CurrentCamera.Settings.AutoExposure.Enabled}">
                            <StackLayout HorizontalOptions="FillAndExpand" Orientation="Horizontal">
                                <Label Style="{StaticResource DrawerText}" Text="Exposure Compensation" HorizontalOptions="StartAndExpand"/>
                                <Label Style="{StaticResource DrawerText}" BindingContext="{x:Reference Name=exposureCompensationSlider}" Text="{Binding Path=Value, Converter={StaticResource PrefixConverter}, ConverterParameter='EV'}" HorizontalOptions="End"/>
                            </StackLayout>                            
                            
                            <Slider x:Name="exposureCompensationSlider"
                                    HorizontalOptions="Fill"
                                    Maximum="2.0"
                                    Minimum="-2.0"
                                    Value="{Binding CurrentCamera.Settings.AutoExposure.Compensation}" />
                        </StackLayout>
                        
                        <!--Hide exposure and flash time sliders if auto exposure is enabled-->
                        <StackLayout IsVisible="{Binding CurrentCamera.Settings.AutoExposure.Enabled, Converter={StaticResource InverseBoolConverter}}">
                            <!--Video Exposure-->
                            <StackLayout HorizontalOptions="FillAndExpand" Orientation="Horizontal">
                                <Label Style="{StaticResource DrawerText}" Text="Video Exposure" HorizontalOptions="StartAndExpand"/>
                                <Label Style="{StaticResource DrawerText}" BindingContext="{x:Reference Name=videoExposureSlider}" Text="{Binding Path=Value, Converter={StaticResource PrefixConverter}, ConverterParameter='µs'}" HorizontalOptions="End"/>
                            </StackLayout>

                            <Slider x:Name="videoExposureSlider" IsEnabled="{Binding IsDemoModeActive, Converter={StaticResource InverseBoolConverter}}"
                                        HorizontalOptions="Fill" 
                                        Maximum="{Binding CurrentCamera.Settings.VideoExposure.Max}" 
                                        Minimum="{Binding CurrentCamera.Settings.VideoExposure.Min}"
                                        Value="{Binding CurrentCamera.Settings.VideoExposure.Current}" />

                            <!--Flash time, hide if auto exposure is available-->
                            <StackLayout IsVisible="{Binding CurrentCamera.Profile.AutoExposure, Converter={StaticResource InverseBoolConverter}}">
                                <StackLayout HorizontalOptions="FillAndExpand" Orientation="Horizontal">
                                    <Label Style="{StaticResource DrawerText}" Text="Video Flash" HorizontalOptions="StartAndExpand" />
                                    <Label Style="{StaticResource DrawerText}" BindingContext="{x:Reference Name=videoFlashTimeSlider}" Text="{Binding Path=Value, Converter={StaticResource PrefixConverter}, ConverterParameter='µs'}}" HorizontalOptions="End"/>
                                </StackLayout>

                                <Slider x:Name="videoFlashTimeSlider" IsEnabled="{Binding IsDemoModeActive, Converter={StaticResource InverseBoolConverter}}"
                                            HorizontalOptions="Fill" 
                                            Maximum="{Binding CurrentCamera.Settings.VideoFlashTime.Max}" 
                                            Minimum="{Binding CurrentCamera.Settings.VideoFlashTime.Min}"
                                            Value="{Binding CurrentCamera.Settings.VideoFlashTime.Current}" />
                            </StackLayout>
                        </StackLayout>
                    </StackLayout>

                    <StackLayout IsVisible="{Binding IsLensControlActive}">

                        <!-- Automated lens control for Oqus 700+ cameras -->
                        <StackLayout HorizontalOptions="FillAndExpand" Orientation="Horizontal">
                            <Label Style="{StaticResource DrawerText}" Text="Lens Focus" HorizontalOptions="StartAndExpand"/>
                            <Label Style="{StaticResource DrawerText}" BindingContext="{x:Reference Name=lensFocusSlider}" Text="{Binding Path=Value, Converter={StaticResource PrefixConverter}, ConverterParameter='m'}" 
                                   HorizontalOptions="End"/>
                        </StackLayout>

                        <Slider x:Name="lensFocusSlider"
                                HorizontalOptions="Fill" 
                                Maximum="{Binding CurrentCamera.MaxFocus}"
                                Minimum="{Binding CurrentCamera.Settings.LensControl.Focus.Min}"
                                Value="{Binding CurrentCamera.Settings.LensControl.Focus.Value}" />

                        <StackLayout HorizontalOptions="FillAndExpand" Orientation="Horizontal">
                            <Label Style="{StaticResource DrawerText}" Text="Lens Aperture" HorizontalOptions="StartAndExpand"/>
                            <Label Style="{StaticResource DrawerText}" Text="{Binding CurrentCamera.Settings.LensControl.Aperture.Value, Converter={StaticResource PrefixConverter}, ConverterParameter='f'}}" HorizontalOptions="End"/>
                        </StackLayout>

                        <Slider x:Name="lensApertureSlider"
                                HorizontalOptions="Fill" 
                                Maximum="{Binding ApertureSnapMax}"
                                Minimum="0"
                                Value="{Binding CurrentCamera.Settings.LensControl.Aperture.Value, Mode=OneWay}"/>

                    </StackLayout>

                </StackLayout>
            </StackLayout>

            </Frame>

        </StackLayout>

    </StackLayout>
        </StackLayout>

    </StackLayout>

</ContentPage>